{"version":3,"sources":["src/gameLogic.js","src/gameData.js","src/common/WebKeyboardListener.web.js","src/common/LabelButton.js","src/common/Container.js","src/Snippet.js","src/Level.js","src/Menu.js","src/ReadingRetention.js","src/PersistenceWrapper.js","App.js","web-build/register-service-worker.js"],"names":["shuffle","array","temporaryValue","randomIndex","currentIndex","length","Math","floor","random","getOptions","index","words","targetWord","otherOptions","filter","word","uniqueOptions","Set","slice","getReadingRetentionSnippet","snippetString","snippetIndex","split","checkWords","map","toLowerCase","endsWith","substring","getUsableWords","visibleHalfLength","check","options","frameDuration","getReadingRetentionPlan","stringSnippets","id","start","snippets","DATA","title","HAS_TOUCH_SCREEN","hasTouchScreen","navigator","maxTouchPoints","msMaxTouchPoints","mQ","window","matchMedia","media","matches","UA","userAgent","test","detectTouchScreen","componentDidMount","a","async","document","addEventListener","_onKeyDown","componentWillUnmount","removeEventListener","evt","key","props","inputKey","onKeyPress","View","this","children","React","getStyle","type","styles","positive","negative","neutral","LabelButton","onPress","label","disabled","style","Text","StyleSheet","create","padding","color","fontSize","Container","container","subcontainer","flex","justifyContent","marginHorizontal","height","maxWidth","width","AnimatedView","enableDuration","disableDuration","enabled","opacity","useRef","Animated","Value","current","useEffect","timing","toValue","duration","Obfuscator","obfuscate","obfuscator","Highlight","highlight","OptionText","state","option","getStateStyle","ReadyView","screenType","onPressReady","ready","OptionView","snippet","selection","onPressOption","optionViews","optionContainer","getState","Level","useState","setScreenType","setSelection","timeoutRef","clearTimeout","texts","i","textContainer","flexDirection","flexWrap","setTimeout","onComplete","marginRight","margin","fontWeight","position","top","bottom","left","right","backgroundColor","borderColor","borderWidth","boxShadow","alignSelf","setSnippetIndex","mistakes","setMistakes","game","correct","updatedMistakes","lastIndex","timestamp","Date","now","Menu","setGame","showInfo","setShowInfo","infoButton","infoText","buttons","getGamePlan","name","labelButton","paddingLeft","paddingRight","paddingTop","results","continueGame","latest","forEach","result","find","getContinueGame","unshift","parseArray","input","JSON","parse","Array","isArray","e","console","error","IS_IN_IFRAME","self","getIsInIframe","ComposedComponent","ReadingRetentionWrapped","onReady","data","setData","AsyncStorage","getItem","then","str","parsed","onmessage","startsWith","location","href","postMessage","item","updated","stringify","setItem","App","serviceWorker","register","scope","info","catch"],"mappings":"6KAGe,SAASA,EAAWC,GAMjC,IALA,IACEC,EACAC,EAFEC,EAAeH,EAAMI,OAKlB,IAAMD,GAEXD,EAAcG,KAAKC,MAAMD,KAAKE,SAAWJ,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGvB,OAAOD,EAkBT,SAASQ,EAAWC,EAAeC,GACjC,IAAMC,EAAaD,EAAMD,GACnBG,EAAeF,EAAMG,QACzB,SAACC,GAAD,OAAUA,GAAQH,GAAcG,EAAKV,QAAUO,EAAWP,UAExDW,EAAgB,IAAIC,IAAIJ,GAC5B,OAAOb,EAAQ,GAAD,WAAKA,EAAQ,IAAIgB,IAAgBE,MAAM,EAAG,IAA1C,CAA8CN,KAQvD,SAASO,EACdC,EACAC,GAEA,IAAMV,EAAuBS,EAAcE,MAAM,KAC3CC,EAhCR,SAAwBZ,GACtB,OAAOA,EACJa,KAAI,SAACT,GAAD,OAAUA,EAAKU,iBACnBD,KAAI,SAACT,GAEJ,OAAIA,EAAKW,SAAS,MAAQX,EAAKW,SAAS,KAC/BX,EAAKY,UAAU,EAAGZ,EAAKV,OAAS,GAEhCU,KAwBqBa,CAAejB,GAcjD,MAAO,CACLkB,kBAAmB,GACnBlB,QACAmB,MALY9B,EAVIuB,EACfC,KAAI,SAACT,EAAML,GAAP,MAAkB,CACrBA,QACAK,OACAgB,QAAStB,EAAWC,EAAOa,OAE5BT,QAEC,SAACgB,GAAD,OAAmC,GAAxBA,EAAMC,QAAQ1B,QAAeyB,EAAMC,QAAQ,GAAG1B,OAAS,MAErC,GAM/B2B,cAAe,IACfX,gBAIG,SAASY,EACdC,EACAC,EACAC,GAKA,MAAO,CACLD,KACAE,SALeH,EACdV,IAAIL,GACJD,MAAMkB,EAAOA,EAAQ,ICvF1B,IAoDeE,EApDF,CACX,CACEH,GAAI,gBACJI,MAAO,mBACPF,SAAU,CACR,kTACA,iaACA,0LACA,0UACA,2NACA,sQACA,wNACA,wYACA,iQACA,iXACA,0ZACA,qMACA,mSACA,mUACA,oZACA,4eACA,4SACA,2RACA,6NACA,gcACA,wNACA,6QACA,0aACA,uiBACA,iRACA,kWACA,ylBACA,uZACA,kfACA,mUACA,kkBACA,8bACA,sjBACA,kSACA,qhBACA,kQACA,oPACA,uaACA,kRACA,gZACA,mNACA,8bACA,qM,oICRN,IAAMG,EA5BN,WACE,IAAIC,GAAiB,EACrB,GAAI,mBAAoBC,UACtBD,EAAiBC,UAAUC,eAAiB,OACvC,GAAI,qBAAsBD,UAC/BD,EAAkBC,UAAgBE,iBAAmB,MAChD,CACL,IAAIC,EAAKC,OAAOC,YAAcA,WAAW,oBACzC,GAAIF,GAAmB,qBAAbA,EAAGG,MACXP,IAAmBI,EAAGI,aACjB,GAAI,gBAAiBH,OAC1BL,GAAiB,MACZ,CAEL,IAAIS,EAAKR,UAAUS,UACnBV,EACE,0CAA0CW,KAAKF,IAC/C,yCAAyCE,KAAKF,IAGpD,OAAOT,EAQgBY,I,mLAGvBC,kBAAoB,oBAAAC,EAAAC,OAAA,gDACbhB,GACHiB,SAASC,iBAAiB,UAAW,EAAKC,YAF1B,sC,EAMpBC,qBAAuB,oBAAAL,EAAAC,OAAA,gDAChBhB,GACHiB,SAASI,oBAAoB,UAAW,EAAKF,YAF1B,sC,EAMvBA,WAAa,SAACG,GACRA,EAAIC,KAAO,EAAKC,MAAMC,UACxB,EAAKD,MAAME,c,iDAKb,OAAK1B,EAGE,KAFE,gBAAC2B,EAAA,EAAD,KAAOC,KAAKJ,MAAMK,c,CArBkBC,aClCjD,SAASC,EAASC,GAChB,OAAQA,GACN,IAAK,WACH,OAAOC,EAAOC,SAChB,IAAK,WACH,OAAOD,EAAOE,SAElB,OAAOF,EAAOG,QAGD,SAASC,EAAT,GAYX,IAXFC,EAWC,EAXDA,QACAN,EAUC,EAVDA,KACAO,EASC,EATDA,MASC,IARDC,gBAQC,SAPDC,EAOC,EAPDA,MAQA,OAAID,EACK,gBAACE,EAAA,EAAD,CAAMD,MAAO,CAACA,EAAOR,EAAOO,WAAYD,GAG/C,gBAACG,EAAA,EAAD,CAAMD,MAAO,CAACA,EAAOV,EAASC,IAAQM,QAASA,GAC5CC,GAKP,IAAMN,EAASU,IAAWC,OAAO,CAC/BV,SAAU,CACRW,QAAS,EACTC,MAAO,QACPC,SAAU,IAEZZ,SAAU,CACRU,QAAS,EACTC,MAAO,MACPC,SAAU,IAEZX,QAAS,CACPS,QAAS,EACTC,MAAO,QACPC,SAAU,IAEZP,SAAU,CACRK,QAAS,EACTC,MAAO,OACPC,SAAU,MCtDC,SAASC,EAAT,GAAuD,IAAlCnB,EAAiC,EAAjCA,SAClC,OACE,gBAACF,EAAA,EAAD,CAAMc,MAAOR,EAAOgB,WAClB,gBAACtB,EAAA,EAAD,CAAMc,MAAOR,EAAOiB,cAAerB,IAKzC,IAAMI,EAASU,IAAWC,OAAO,CAC/BK,UAAW,CACTE,KAAM,EACNC,eAAgB,cAElBF,aAAc,CACZG,iBAAkB,OAClBC,OAAQ,OACRC,SAAU,IACVC,MAAO,UC4BX,SAASC,EAAT,GAUI,IAAD,IATDC,sBASC,MATgB,IAShB,MARDC,uBAQC,MARiB,IAQjB,EAPDC,EAOC,EAPDA,QACAnB,EAMC,EANDA,MAOMoB,EAAUC,iBAAO,IAAIC,IAASC,MAAMJ,EAAU,EAAI,IAAIK,QAe5D,OAbAC,qBAAU,WACJN,EACFG,IAASI,OAAON,EAAS,CACvBO,QAAS,EACTC,SAAUX,IACT9D,QAEHmE,IAASI,OAAON,EAAS,CACvBO,QAAS,EACTC,SAAUV,IACT/D,UAEJ,CAACgE,IACG,kBAACG,EAAA,EAASpC,KAAV,CAAec,MAAO,CAACA,EAAO,CAAEoB,cAGzC,SAASS,EAAT,GAA4D,IAAtCC,EAAqC,EAArCA,UACpB,OAAO,kBAACd,EAAD,CAAchB,MAAOR,EAAOuC,WAAYZ,QAASW,IAG1D,SAASE,EAAT,GAAuD,IAAlCb,EAAiC,EAAjCA,QACnB,OACE,kBAACH,EAAD,CACEE,gBAAiB,EACjBlB,MAAOR,EAAOyC,UACdd,QAASA,IAUf,SAASe,EAAT,GAQI,IAPFpG,EAOC,EAPDA,KACA+D,EAMC,EANDA,QACAsC,EAKC,EALDA,MAiBA,OACE,kBAAClC,EAAA,EAAD,CACEJ,QAAS,kBAAiB,MAAXA,GAAmBA,EAAQ/D,IAC1CkE,MAAO,CAACR,EAAO4C,OAdG,SAACD,GACrB,OAAQA,GACN,KAd8B,EAe5B,MAAO,CAAE9B,MAAO,OAClB,KAf4B,EAgB1B,MAAO,CAAEA,MAAO,SAClB,QACA,KApB4B,EAqB1B,OAAO,MAMcgC,CAAcF,KAEpCrG,GAKP,SAASwG,EAAT,GAMI,IALFC,EAKC,EALDA,WACAC,EAIC,EAJDA,aAKA,OAAQD,GACN,KAvGwB,EAwGtB,OACE,kBAAC3C,EAAD,CACEE,MAAM,QACNP,KAAK,WACLM,QAAS2C,EACTxC,MAAOR,EAAOiD,QAGpB,QACA,KA7GsB,EA8GtB,KA5GuB,EA6GrB,OAAO,MAIb,SAASC,EAAT,GAUI,IATFC,EASC,EATDA,QACAJ,EAQC,EARDA,WACAK,EAOC,EAPDA,UACAC,EAMC,EANDA,cAOMhG,EAAQ8F,EAAQ9F,MACtB,GAAa,MAATA,EACF,OAAO,KAET,OAAQ0F,GACN,KAnIsB,EAoIpB,IAAMO,EAAcjG,EAAMC,QAAQP,KAAI,SAACT,EAAML,GAAP,OACpC,kBAACyG,EAAD,CACEC,MA7EwB,EA8ExBrD,IAAKhD,EACLA,KAAMA,EACN+D,QAASgD,OAGb,OAAO,kBAAC3D,EAAA,EAAD,CAAMc,MAAOR,EAAOuD,iBAAkBD,GAE/C,KA5IuB,EA6IrB,IAAME,EAAW,SAAClH,GAChB,OAAIA,GAAQ8G,GAAa9G,GAAQe,EAAMf,KArFb,EAuFfA,GAAQ8G,GAAa9G,GAAQe,EAAMf,KAxFlB,EADF,GA+FtBgH,EAAcjG,EAAMC,QAAQP,KAAI,SAACT,EAAML,GAAP,OACpC,kBAACyG,EAAD,CAAYpD,IAAKhD,EAAMA,KAAMA,EAAMqG,MAAOa,EAASlH,QAErD,OAAO,kBAACoD,EAAA,EAAD,CAAMc,MAAOR,EAAOuD,iBAAkBD,GAG/C,QACA,KAnKwB,EAoKtB,OAAO,MAIE,SAASG,EAAMlE,GAAe,IAAD,EACNmE,mBAzKV,GAwKgB,WACnCX,EADmC,KACvBY,EADuB,OAIRD,mBAAU,MAJF,WAInCN,EAJmC,KAIxBQ,EAJwB,KAMpCC,EAAahC,iBAAQ,MAE3BI,qBAAU,WAGR,OAFA0B,EAjLwB,GAkLxBC,EAAa,MACN,WACqB,MAAtBC,EAAW7B,UACb8B,aAAaD,EAAW7B,SACxB6B,EAAW7B,QAAU,SAGxB,CAACzC,EAAM4D,UAEV,IAoBM9F,EAAQkC,EAAM4D,QAAQ9F,MACtB0G,EAAQxE,EAAM4D,QAAQjH,MAAMa,KAAI,SAACT,EAAM0H,GAC3C,IAAMvB,EAjNkB,GAkNtBM,GAAqCiB,GAAK3G,EAAMpB,MAC9C,kBAACuG,EAAD,CACEb,QAhNgB,GAiNdoB,GA/Me,GA+MoBA,IAGrC,KACN,OACE,kBAACrD,EAAA,EAAD,CAAMJ,IAAK0E,EAAGxD,MAAOR,EAAOiE,eAC1B,kBAACxD,EAAA,EAAD,CAAMD,MAAOR,EAAO1D,MAAOA,GAC3B,kBAAC+F,EAAD,CACEC,UAzNgB,GA0NdS,GA5NyB,GA6NzBA,IAGHN,MAIP,OACE,kBAAC1B,EAAD,KACE,kBAACrB,EAAA,EAAD,CAAMc,MAAO,CAAE0D,cAAe,MAAOC,SAAU,SAAWJ,GAC1D,kBAACb,EAAD,CACEC,QAAS5D,EAAM4D,QACfJ,WAAYA,EACZM,cA5CgB,SAACD,GACrBQ,EAAaR,GACbO,EA5LuB,GA6LvBE,EAAW7B,QAAUoC,YAAW,WAC9B7E,EAAM8E,WAAWjB,GAAa7D,EAAM4D,QAAQ9F,MAAMf,QACjD,MAwCC8G,UAAWA,IAEb,kBAACN,EAAD,CAAWC,WAAYA,EAAYC,aAvClB,WACnBa,EAAW7B,QAAUoC,YAAW,WAC9BT,EAtMoB,KAuMnB,KACHA,EA1MiC,OAkPrC,IAAM3D,EAASU,IAAWC,OAAO,CAC/BrE,KAAM,CACJwE,SAAU,GACVwD,YAAa,GAEfL,cAAe,CACbM,OAAQ,GAEVhB,gBAAiB,CACfW,cAAe,OAEjBtB,OAAQ,CACN2B,OAAQ,EACRzD,SAAU,GACV0D,WAAY,QAEdjC,WAAY,CACVkC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,gBAAiB,WAEnBrC,UAAW,CACTgC,SAAU,WACVC,IAAK,EACLC,OAAQ,EACRC,MAAO,EACPC,MAAO,EACPE,YAAa,QACbC,YAAa,EACbC,UAAW,iBAEbhC,MAAO,CACLsB,OAAQ,EACRzD,SAAU,GACVoE,UAAW,YC3SA,SAASzB,EAAMlE,GAAe,IAAD,EACFmE,mBAAS,GADP,WACnC9G,EADmC,KACrBuI,EADqB,OAEVzB,mBAAS,GAFC,WAEnC0B,EAFmC,KAEzBC,EAFyB,KAmBpClC,EAAU5D,EAAM+F,KAAK1H,SAAShB,GACpC,OAAO,kBAAC,EAAD,CAASuG,QAASA,EAASkB,WAhBR,SAACkB,GACzB,IAAMC,EAAkBD,EAAUH,EAAWA,EAAW,EACxDC,EAAYG,GACR5I,EAAe,GAAK2C,EAAM+F,KAAK1H,SAAShC,OAC1C2D,EAAM8E,WAAW,CACfe,SAAUI,EACV9H,GAAI6B,EAAM+F,KAAK5H,GACf+H,UAAWlG,EAAM+F,KAAK1H,SAAShB,GAAcA,aAC7C8I,UAAWC,KAAKC,QAGlBT,EAAgBvI,EAAe,MCTtB,SAASiJ,EAAT,GAA4C,IAA5BC,EAA2B,EAA3BA,QAASxI,EAAkB,EAAlBA,QAAkB,EACxBoG,oBAAS,GADe,WACjDqC,EADiD,KACvCC,EADuC,KAGxD,GAAID,EAAU,CAEZ,OACE,kBAAChF,EAAD,KACE,kBAACX,EAAD,CACEE,MAAM,SACND,QALe,kBAAM2F,GAAY,IAMjCjG,KAAK,UACLS,MAAOR,EAAOiG,aAEhB,kBAACxF,EAAA,EAAD,CAAMD,MAAOR,EAAOkG,UAApB,4BAC4B,KAD5B,oFAGgB,OAMtB,IAAMC,EAAU7I,EAAQP,KAAI,YAA4B,IAAzBqJ,EAAwB,EAAxBA,YAAaC,EAAW,EAAXA,KACpChG,EACW,MAAf+F,EAAsB,aAAW,kBAAMN,EAAQM,MACjD,OACE,kBAAChG,EAAD,CACEd,IAAK+G,EACL/F,MAAO+F,EACP9F,SAAyB,MAAf6F,EACV/F,QAASA,EACTN,KAAK,WACLS,MAAOR,EAAOsG,iBAOpB,OACE,kBAACvF,EAAD,KACE,kBAACX,EAAD,CACEE,MAAM,eACND,QANc,kBAAM2F,GAAY,IAOhCjG,KAAK,UACLS,MAAOR,EAAOiG,aAEfE,GAKP,IAAMnG,EAASU,IAAWC,OAAO,CAC/BsF,WAAY,CAAEpB,MAAO,EAAGJ,SAAU,YAClCyB,SAAU,CAAEK,YAAa,EAAGC,aAAc,GAAIC,WAAY,GAC1DH,YAAa,CAAEpB,UAAW,YCnB5B,SAASlJ,EACP0K,GAEA,IAAMpJ,EAAUO,EAAKd,KAAI,SAAC6F,GACxB,MAAO,CACLyD,KAAMzD,EAAO9E,MACbsI,YAAa,kBAAM5I,EAAwBoF,EAAOhF,SAAUgF,EAAOlF,GAAI,QAIrEiJ,EA/CR,SACED,GAEA,IAAIE,EAAsB,KAY1B,GAXAF,EAAQG,SAAQ,SAAC7E,GAEQ,MAArBA,EAAQ0D,YACG,MAAVkB,GACqB,MAApBA,EAAOlB,WACPkB,EAAOlB,UAAY1D,EAAQ0D,aAE7BkB,EAAS5E,MAIC,MAAV4E,EAAgB,CAClB,IAAME,EAASF,EACThE,EAAS/E,EAAKkJ,MAClB,SAACnE,GAAD,OACEA,EAAOlF,IAAMoJ,EAAOpJ,IAAmB,MAAbkF,EAAOlF,IAA2B,MAAboJ,EAAOpJ,MAE1D,GAAc,MAAVkF,EACF,MAAO,CACLyD,KAAM,WACND,YAAa,kBACX5I,EACEoF,EAAOhF,SACPgF,EAAOlF,GACPoJ,EAAOrB,UAAY,KAM7B,OAAO,KAacuB,CAAgBN,GAIrC,OAHoB,MAAhBC,GACFrJ,EAAQ2J,QAAQN,GAEXrJ,E,YC5DT,SAAS4J,EAAcC,GACrB,IACE,IAAML,EAASM,KAAKC,MAAMF,GAC1B,GAAIG,MAAMC,QAAQT,GAChB,OAAOA,EAET,MAAOU,GACPC,QAAQC,MAAMF,GACdC,QAAQC,MAAMP,GAEhB,MAAO,GAYT,IAAMQ,EATN,WACE,IACE,OAAOtJ,OAAOuJ,OAASvJ,OAAOqG,IAC9B,MAAO8C,GACP,OAAO,GAKUK,GC5BrB,IDmCEC,ECnCIC,GDmCJD,EDkCa,YAQX,IAPFzD,EAOC,EAPDA,WACA2D,EAMC,EANDA,QACAC,EAKC,EALDA,KAKC,EACuBvE,mBAAU,MADjC,WACM4B,EADN,KACYQ,EADZ,KAGD7D,qBAAU,WACR+F,MACC,IAEH,IAAM1K,EAAUtB,EAAWiM,GAE3B,OAAY,MAAR3C,EACK,kBAACO,EAAD,CAAMvI,QAASA,EAASwI,QAASA,IAOjC,kBAAC,EAAD,CAAOR,KAAMA,EAAMjB,WALA,SAACyC,GACzBzC,EAAWyC,GACXhB,EAAQ,UCtDL,WAAO,IAAD,EACapC,mBAAU,IADvB,WACJuE,EADI,KACEC,EADF,KAENP,GACH1F,qBAAU,WACRkG,IAAaC,QAAQ,QAAQC,MAAK,SAACC,GACjC,IAAMC,EAAcrB,EAAWoB,GAC/BJ,EAAQK,QAET,IAEL,IAAMP,EAAUL,EACZ,WACEtJ,OAAOmK,UAAY,SAAShB,GAC1B,GAAsB,kBAAXA,EAAES,MACPT,EAAES,KAAKQ,WAAWpK,OAAOqK,SAASC,KAAO,UAAW,CAEtD,IACMJ,EAAmBrB,EADbM,EAAES,KAAKpL,MAAM,KAAKJ,MAAM,GACI,IACxCyL,EAAQK,KAIdlK,OAAOqG,IAAIkE,YAAYvK,OAAOqK,SAASC,KAAO,SAAU,MAE1D,aAeJ,OACE,kBAACb,EAAD,CACEzD,WAfe,SAACwE,GAClB,IAAMC,EAAO,cAAOb,GAAP,CAAaY,IACtBlB,EACFtJ,OAAOqG,IAAIkE,YACTvK,OAAOqK,SAASC,KAAO,aAAevB,KAAK2B,UAAUD,GACrD,KAGFX,IAAaa,QAAQ,OAAQ5B,KAAK2B,UAAUD,IAE9CZ,EAAQY,IAMNd,QAASA,EACTC,KAAMA,MC9EC,SAASgB,EAAI1J,GAC1B,OAAO,gBAACwI,EAA4BxI,K,4DCNlC,kBAAmBtB,WACrBI,OAAOY,iBAAiB,QAAQ,WAC9BhB,UAAUiL,cACPC,SAAS,4CAA6C,CAAEC,MAAO,wBAC/Df,MAAK,SAAUgB,OAGfC,OAAM,SAAU5B,GACfD,QAAQ4B,KAAK,oCAAqC3B,W","file":"static/js/app.d2300f3d.chunk.js","sourcesContent":["// @flow\nimport type { ReadingRetentionGame, ReadingRetentionSnippet } from \"./types\";\n\nexport default function shuffle<T>(array: Array<T>): Array<T> {\n  var currentIndex = array.length,\n    temporaryValue,\n    randomIndex;\n\n  // While there remain elements to shuffle...\n  while (0 !== currentIndex) {\n    // Pick a remaining element...\n    randomIndex = Math.floor(Math.random() * currentIndex);\n    currentIndex -= 1;\n\n    // And swap it with the current element.\n    temporaryValue = array[currentIndex];\n    array[currentIndex] = array[randomIndex];\n    array[randomIndex] = temporaryValue;\n  }\n\n  return array;\n}\n\nconst VISIBLE_HALF_LENGTH = 20;\n\nfunction getUsableWords(words: Array<string>): Array<string> {\n  return words\n    .map((word) => word.toLowerCase())\n    .map((word) => {\n      // this will probably expand to encompass most punctuation\n      if (word.endsWith(\".\") || word.endsWith(\",\")) {\n        return word.substring(0, word.length - 1);\n      } else {\n        return word;\n      }\n    });\n}\n\nfunction getOptions(index: number, words: Array<string>): Array<string> {\n  const targetWord = words[index];\n  const otherOptions = words.filter(\n    (word) => word != targetWord && word.length == targetWord.length\n  );\n  let uniqueOptions = new Set(otherOptions);\n  return shuffle([...shuffle([...uniqueOptions]).slice(0, 2), targetWord]);\n}\n\n// game plan for reading retention should be an array of strings.\n// a subset of the strings should be revealed to the player over time, with\n// trailing words being obscured. The player will be quizzed on the words they\n// saw previously\n\nexport function getReadingRetentionSnippet(\n  snippetString: string,\n  snippetIndex: number\n): ReadingRetentionSnippet {\n  const words: Array<string> = snippetString.split(\" \");\n  const checkWords: Array<string> = getUsableWords(words);\n\n  const allChecks = checkWords\n    .map((word, index) => ({\n      index,\n      word,\n      options: getOptions(index, checkWords),\n    }))\n    .filter(\n      // we want three options, but of words 3 letters or longer\n      (check) => check.options.length == 3 && check.options[0].length > 2\n    );\n  const check = shuffle(allChecks)[0];\n\n  return {\n    visibleHalfLength: 20,\n    words,\n    check,\n    frameDuration: 200,\n    snippetIndex,\n  };\n}\n\nexport function getReadingRetentionPlan(\n  stringSnippets: Array<string>,\n  id: string,\n  start: number\n): ReadingRetentionGame {\n  const snippets = stringSnippets\n    .map(getReadingRetentionSnippet)\n    .slice(start, start + 3);\n  return {\n    id,\n    snippets,\n  };\n}\n","const DATA = [\n  {\n    id: \"howtoworkhard\",\n    title: \"How to Work Hard\",\n    snippets: [\n      \"It might not seem there's much to learn about how to work hard. Anyone who's been to school knows what it entails, even if they chose not to. There are 12 year olds who work amazingly hard. And yet when I ask if I know more about working hard now than when I was in school, the answer is definitely yes.\",\n      \"One thing I know is that if you want to do great things, you'll have to work very hard. I wasn't sure of that as a kid. Schoolwork varied in difficulty; one didn't always have to work super hard to do well. And some of the things famous adults did, they seemed to do almost effortlessly. Was there, perhaps, some way to evade hard work through sheer brilliance? Now I know the answer to that question. There isn't.\",\n      \"The reason some subjects seemed easy was that my school had low standards. And the reason famous adults seemed to do things effortlessly was years of practice; they made it look easy.\",\n      \"Of course, those famous adults usually had a lot of natural ability too. There are three ingredients in great work: natural ability, practice, and effort. You can do pretty well with just two, but to do the best work you need all three: you need great natural ability and to have practiced a lot and to be trying very hard. [1]\",\n      'Bill Gates, for example, was among the smartest people in business in his era, but he was also among the hardest working. \"I never took a day off in my twenties,\" he said. \"Not one.\" It was similar with Lionel Messi.',\n      \"He had great natural ability, but when his youth coaches talk about him, what they remember is not his talent but his dedication and his desire to win. P. G. Wodehouse would probably get my vote for best English writer of the 20th century, if I had to choose.\",\n      \"Certainly no one ever made it look easier. But no one ever worked harder. At 74, he wrote  with each new book of mine I have, as I say, the feeling that this time I have picked a lemon in the garden of literature.\",\n      \"A good thing, really, I suppose. Keeps one up on one's toes and makes one rewrite every sentence ten times. Or in many cases twenty times.  Sounds a bit extreme, you think. And yet Bill Gates sounds even more extreme. Not one day off in ten years? These two had about as much natural ability as anyone could have, and yet they also worked about as hard as anyone could work. You need both.\",\n      \"That seems so obvious, and yet in practice we find it slightly hard to grasp. There's a faint xor between talent and hard work. It comes partly from popular culture, where it seems to run very deep, and partly from the fact that the outliers are so rare.\",\n      \"If great talent and great drive are both rare, then people with both are rare squared. Most people you meet who have a lot of one will have less of the other. But you'll need both if you want to be an outlier yourself. And since you can't really change how much natural talent you have, in practice doing great work, insofar as you can, reduces to working very hard.\",\n      \"It's straightforward to work hard if you have clearly defined, externally imposed goals, as you do in school. There is some technique to it: you have to learn not to lie to yourself, not to procrastinate (which is a form of lying to yourself), not to get distracted, and not to give up when things go wrong. But this level of discipline seems to be within the reach of quite young children, if they want it.\",\n      \"What I've learned since I was a kid is how to work toward goals that are neither clearly defined nor externally imposed. You'll probably have to learn both if you want to do really great things.\",\n      \"The most basic level of which is simply to feel you should be working without anyone telling you to. Now, when I'm not working hard, alarm bells go off. I can't be sure I'm getting anywhere when I'm working hard, but I can be sure I'm getting nowhere when I'm not, and it feels awful. [2]\",\n      \"There wasn't a single point when I learned this. Like most little kids, I enjoyed the feeling of achievement when I learned or did something new. As I grew older, this morphed into a feeling of disgust when I wasn't achieving anything. The one precisely dateable landmark I have is when I stopped watching TV, at age 13.\",\n      \"Several people I've talked to remember getting serious about work around this age. When I asked Patrick Collison when he started to find idleness distasteful, he said  I think around age 13 or 14. I have a clear memory from around then of sitting in the sitting room, staring outside, and wondering why I was wasting my summer holiday.  Perhaps something changes at adolescence. That would make sense.\",\n      \"Strangely enough, the biggest obstacle to getting serious about work was probably school, which made work (what they called work) seem boring and pointless. I had to learn what real work was before I could wholeheartedly desire to do it. That took a while, because even in college a lot of the work is pointless; there are entire departments that are pointless. But as I learned the shape of real work, I found that my desire to do it slotted into it as if they'd been made for each other.\",\n      \"I suspect most people have to learn what work is before they can love it. Hardy wrote eloquently about this in A Mathematician's Apology:  I do not remember having felt, as a boy, any passion for mathematics, and such notions as I may have had of the career of a mathematician were far from noble.\",\n      \"I thought of mathematics in terms of examinations and scholarships: I wanted to beat other boys, and this seemed to be the way in which I could do so most decisively.  He didn't learn what math was really about till part way through college, when he read Jordan's Cours d'analyse.\",\n      \"I shall never forget the astonishment with which I read that remarkable work, the first inspiration for so many mathematicians of my generation, and learnt for the first time as I read it what mathematics really meant.\",\n      \"There are two separate kinds of fakeness you need to learn to discount in order to understand what real work is. One is the kind Hardy encountered in school. Subjects get distorted when they're adapted to be taught to kids - often so distorted that they're nothing like the work done by actual practitioners. [3] The other kind of fakeness is intrinsic to certain types of work. Some types of work are inherently bogus, or at best mere busywork.\",\n      \"There's a kind of solidity to real work. It's not all writing the Principia, but it all feels necessary. That's a vague criterion, but it's deliberately vague, because it has to cover a lot of different types. [4]\",\n      \"Once you know the shape of real work, you have to learn how many hours a day to spend on it. You can't solve this problem by simply working every waking hour, because in many kinds of work there's a point beyond which the quality of the result will start to decline.\",\n      \"That limit varies depending on the type of work and the person. I've done several different kinds of work, and the limits were different for each. My limit for the harder types of writing or programming is about five hours a day. Whereas when I was running a startup, I could work all the time. At least for the three years I did it; if I'd kept going much longer, I'd probably have needed to take occasional vacations. [5]\",\n      \"The only way to find the limit is by crossing it. Cultivate a sensitivity to the quality of the work you're doing, and then you'll notice if it decreases because you're working too hard. Honesty is critical here, in both directions: you have to notice when you're being lazy, but also when you're working too hard. And if you think there's something admirable about working too hard, get that idea out of your head. You're not merely getting worse results, but getting them because you're showing off - if not to other people, then to yourself. [6]\",\n      \"Finding the limit of working hard is a constant, ongoing process, not something you do just once. Both the difficulty of the work and your ability to do it can vary hour to hour, so you need to be constantly judging both how hard you're trying and how well you're doing.\",\n      \"Trying hard doesn't mean constantly pushing yourself to work, though. There may be some people who do, but I think my experience is fairly typical, and I only have to push myself occasionally when I'm starting a project or when I encounter some sort of check. That's when I'm in danger of procrastinating. But once I get rolling, I tend to keep going.\",\n      \"What keeps me going depends on the type of work. When I was working on Viaweb, I was driven by fear of failure. I barely procrastinated at all then, because there was always something that needed doing, and if I could put more distance between me and the pursuing beast by doing it, why wait? [7] Whereas what drives me now, writing essays, is the flaws in them. Between essays I fuss for a few days, like a dog circling while it decides exactly where to lie down. But once I get started on one, I don't have to push myself to work, because there's always some error or omission already pushing me.\",\n      \"I do make some amount of effort to focus on important topics. Many problems have a hard core at the center, surrounded by easier stuff at the edges. Working hard means aiming toward the center to the extent you can. Some days you may not be able to; some days you'll only be able to work on the easier, peripheral stuff. But you should always be aiming as close to the center as you can without stalling.\",\n      \"The bigger question of what to do with your life is one of these problems with a hard core. There are important problems at the center, which tend to be hard, and less important, easier ones at the edges. So as well as the small, daily adjustments involved in working on a specific problem, you'll occasionally have to make big, lifetime-scale adjustments about which type of work to do. And the rule is the same: working hard means aiming toward the center - toward the most ambitious problems.\",\n      \"By center, though, I mean the actual center, not merely the current consensus about the center. The consensus about which problems are most important is often mistaken, both in general and within specific fields. If you disagree with it, and you're right, that could represent a valuable opportunity to do something new.\",\n      \"The more ambitious types of work will usually be harder, but although you should not be in denial about this, neither should you treat difficulty as an infallible guide in deciding what to do. If you discover some ambitious type of work that's a bargain in the sense of being easier for you than other people, either because of the abilities you happen to have, or because of some new way you've found to approach it, or simply because you're more excited about it, by all means work on that. Some of the best work is done by people who find an easy way to do something hard.\",\n      \"As well as learning the shape of real work, you need to figure out which kind you're suited for. And that doesn't just mean figuring out which kind your natural abilities match the best; it doesn't mean that if you're 7 feet tall, you have to play basketball. What you're suited for depends not just on your talents but perhaps even more on your interests. A deep interest in a topic makes people work harder than any amount of discipline can.\",\n      \"It can be harder to discover your interests than your talents. There are fewer types of talent than interest, and they start to be judged early in childhood, whereas interest in a topic is a subtle thing that may not mature till your twenties, or even later. The topic may not even exist earlier. Plus there are some powerful sources of error you need to learn to discount. Are you really interested in x, or do you want to work on it because you'll make a lot of money, or because other people will be impressed with you, or because your parents want you to? [8]\",\n      \"The difficulty of figuring out what to work on varies enormously from one person to another. That's one of the most important things I've learned about work since I was a kid. As a kid, you get the impression that everyone has a calling, and all they have to do is figure out what it is.\",\n      \"That's how it works in movies, and in the streamlined biographies fed to kids. Sometimes it works that way in real life. Some people figure out what to do as children and just do it, like Mozart. But others, like Newton, turn restlessly from one kind of work to another. Maybe in retrospect we can identify one as their calling - we can wish Newton spent more time on math and physics and less on alchemy and theology - but this is an illusion induced by hindsight bias. There was no voice calling to him that he could have heard.\",\n      \"So while some people's lives converge fast, there will be others whose lives never converge. And for these people, figuring out what to work on is not so much a prelude to working hard as an ongoing part of it, like one of a set of simultaneous equations.\",\n      \"For these people, the process I described earlier has a third component: along with measuring both how hard you're working and how well you're doing, you have to think about whether you should keep working in this field or switch to another.\",\n      \"If you're working hard but not getting good enough results, you should switch. It sounds simple expressed that way, but in practice it's very difficult. You shouldn't give up on the first day just because you work hard and don't get anywhere. You need to give yourself time to get going. But how much time? And what should you do if work that was going well stops going well? How much time do you give yourself then? [9]\",\n      \"What even counts as good results? That can be really hard to decide. If you're exploring an area few others have worked in, you may not even know what good results look like. History is full of examples of people who misjudged the importance of what they were working on.\",\n      \"The best test of whether it's worthwhile to work on something is whether you find it interesting. That may sound like a dangerously subjective measure, but it's probably the most accurate one you're going to get. You're the one working on the stuff. Who's in a better position than you to judge whether it's important, and what's a better predictor of its importance than whether it's interesting?\",\n      \"For this test to work, though, you have to be honest with yourself. Indeed, that's the most striking thing about the whole question of working hard: how at each point it depends on being honest with yourself.\",\n      \"Working hard is not just a dial you turn up to 11. It's a complicated, dynamic system that has to be tuned just right at each point. You have to understand the shape of real work, see clearly what kind you're best suited for, aim as close to the true core of it as you can, accurately judge at each moment both what you're capable of and how you're doing, and put in as many hours each day as you can without harming the quality of the result.\",\n      \"This network is too complicated to trick. But if you're consistently honest and clear-sighted, it will automatically assume an optimal shape, and you'll be productive in a way few people are.\",\n    ],\n  },\n];\n\nexport default DATA;\n","// @flow\nimport * as React from \"react\";\nimport { Dimensions } from \"react-native\";\nimport { View } from \"react-native\";\n\ntype Props = {\n  children?: React.Node,\n  inputKey: string,\n  onKeyPress: () => void,\n};\n\nfunction detectTouchScreen() {\n  var hasTouchScreen = false;\n  if (\"maxTouchPoints\" in navigator) {\n    hasTouchScreen = navigator.maxTouchPoints > 0;\n  } else if (\"msMaxTouchPoints\" in navigator) {\n    hasTouchScreen = (navigator: any).msMaxTouchPoints > 0;\n  } else {\n    var mQ = window.matchMedia && matchMedia(\"(pointer:coarse)\");\n    if (mQ && mQ.media === \"(pointer:coarse)\") {\n      hasTouchScreen = !!mQ.matches;\n    } else if (\"orientation\" in window) {\n      hasTouchScreen = true; // deprecated, but good fallback\n    } else {\n      // Only as a last resort, fall back to user agent sniffing\n      var UA = navigator.userAgent;\n      hasTouchScreen =\n        /\\b(BlackBerry|webOS|iPhone|IEMobile)\\b/i.test(UA) ||\n        /\\b(Android|Windows Phone|iPad|iPod)\\b/i.test(UA);\n    }\n  }\n  return hasTouchScreen;\n}\n\n/* this isn't 100% accurate for our needs. We actually want\nsomething like HAS_KEYBOARD and reverse the conditions below,\nBUT this is close enough for the time being. People on touch\nscreen laptops will be left in the cold :(\n*/\nconst HAS_TOUCH_SCREEN = detectTouchScreen();\n\nexport default class WebKeyboardListener extends React.Component<Props> {\n  componentDidMount = async () => {\n    if (!HAS_TOUCH_SCREEN) {\n      document.addEventListener(\"keydown\", this._onKeyDown);\n    }\n  };\n\n  componentWillUnmount = async () => {\n    if (!HAS_TOUCH_SCREEN) {\n      document.removeEventListener(\"keydown\", this._onKeyDown);\n    }\n  };\n\n  _onKeyDown = (evt: any) => {\n    if (evt.key == this.props.inputKey) {\n      this.props.onKeyPress();\n    }\n  };\n\n  render() {\n    if (!HAS_TOUCH_SCREEN) {\n      return <View>{this.props.children}</View>;\n    }\n    return null;\n  }\n}\n","// @flow\nimport * as React from \"react\";\n\nimport { StyleSheet, Text } from \"react-native\";\n\ntype ButtonType = \"positive\" | \"warning\" | \"negative\" | \"neutral\";\n\nfunction getStyle(type: ButtonType) {\n  switch (type) {\n    case \"positive\":\n      return styles.positive;\n    case \"negative\":\n      return styles.negative;\n  }\n  return styles.neutral;\n}\n\nexport default function LabelButton({\n  onPress,\n  type,\n  label,\n  disabled = false,\n  style,\n}: {\n  type: ButtonType,\n  onPress: () => void,\n  label: string,\n  disabled?: boolean,\n  style?: any,\n}) {\n  if (disabled) {\n    return <Text style={[style, styles.disabled]}>{label}</Text>;\n  }\n  return (\n    <Text style={[style, getStyle(type)]} onPress={onPress}>\n      {label}\n    </Text>\n  );\n}\n\nconst styles = StyleSheet.create({\n  positive: {\n    padding: 8,\n    color: \"green\",\n    fontSize: 24,\n  },\n  negative: {\n    padding: 8,\n    color: \"red\",\n    fontSize: 24,\n  },\n  neutral: {\n    padding: 8,\n    color: \"black\",\n    fontSize: 24,\n  },\n  disabled: {\n    padding: 8,\n    color: \"grey\",\n    fontSize: 24,\n  },\n});\n","// @flow\nimport * as React from \"react\";\n\nimport { StyleSheet, View } from \"react-native\";\n\nexport default function Container({ children }: { children?: ?any }) {\n  return (\n    <View style={styles.container}>\n      <View style={styles.subcontainer}>{children}</View>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"flex-start\",\n  },\n  subcontainer: {\n    marginHorizontal: \"auto\",\n    height: \"100%\",\n    maxWidth: 600,\n    width: \"100%\",\n  },\n});\n","// @flow\nimport React, { useEffect, useState, useRef } from \"react\";\n\nimport {\n  Button,\n  StyleSheet,\n  Switch,\n  Text,\n  TouchableHighlight,\n  View,\n  Platform,\n  TextInput,\n  Animated,\n} from \"react-native\";\nimport WebKeyboardListener from \"./common/WebKeyboardListener\";\n\nimport type {\n  ReadingRetentionSnippet,\n  GameResult,\n  ReadingRetentionCheck,\n} from \"./types\";\nimport LabelButton from \"./common/LabelButton\";\nimport Container from \"./common/Container\";\n\nexport type Props = {|\n  onComplete: (boolean) => void,\n  snippet: ReadingRetentionSnippet,\n|};\n\n// TODO create a TRANSITION state between reading + entry which covers the words, but doesn't\n// show the options or highlight\n\n// user should be reading\nconst READING_SCREEN_TYPE = 1;\n// text is transition from visible to not visible\nconst ENTRY_TRANSITION_SCREEN_TYPE = 2;\n// user provides an answer\nconst ENTRY_SCREEN_TYPE = 3;\n// user sees whether the answer was correct\nconst ANSWER_SCREEN_TYPE = 4;\n\ntype ScreenType = 1 | 2 | 3 | 4;\n\ntype State = {\n  screenType: ScreenType,\n  selection: ?string,\n};\n\nconst FRAME_DURATION = 100;\n\nfunction AnimatedView({\n  enableDuration = 2000,\n  disableDuration = 2000,\n  enabled,\n  style,\n}: {\n  enableDuration?: number,\n  disableDuration?: number,\n  style: Object,\n  enabled: boolean,\n}) {\n  const opacity = useRef(new Animated.Value(enabled ? 1 : 0)).current;\n\n  useEffect(() => {\n    if (enabled) {\n      Animated.timing(opacity, {\n        toValue: 1,\n        duration: enableDuration,\n      }).start();\n    } else {\n      Animated.timing(opacity, {\n        toValue: 0,\n        duration: disableDuration,\n      }).start();\n    }\n  }, [enabled]);\n  return <Animated.View style={[style, { opacity }]} />;\n}\n\nfunction Obfuscator({ obfuscate }: { obfuscate: boolean }) {\n  return <AnimatedView style={styles.obfuscator} enabled={obfuscate} />;\n}\n\nfunction Highlight({ enabled }: { enabled: boolean }) {\n  return (\n    <AnimatedView\n      disableDuration={0}\n      style={styles.highlight}\n      enabled={enabled}\n    />\n  );\n}\n\ntype OptionTextState = 0 | 1 | 2;\nconst OPTION_TEXT_STATE_DEFAULT = 0;\nconst OPTION_TEXT_STATE_INCORRECT = 1;\nconst OPTION_TEXT_STATE_CORRECT = 2;\n\nfunction OptionText({\n  word,\n  onPress,\n  state,\n}: {\n  onPress?: (string) => void,\n  state: OptionTextState,\n  word: string,\n}) {\n  const getStateStyle = (state: OptionTextState) => {\n    switch (state) {\n      case OPTION_TEXT_STATE_INCORRECT:\n        return { color: \"red\" };\n      case OPTION_TEXT_STATE_CORRECT:\n        return { color: \"green\" };\n      default:\n      case OPTION_TEXT_STATE_DEFAULT:\n        return null;\n    }\n  };\n  return (\n    <Text\n      onPress={() => onPress != null && onPress(word)}\n      style={[styles.option, getStateStyle(state)]}\n    >\n      {word}\n    </Text>\n  );\n}\n\nfunction ReadyView({\n  screenType,\n  onPressReady,\n}: {\n  screenType: ScreenType,\n  onPressReady: () => void,\n}) {\n  switch (screenType) {\n    case READING_SCREEN_TYPE:\n      return (\n        <LabelButton\n          label=\"ready\"\n          type=\"positive\"\n          onPress={onPressReady}\n          style={styles.ready}\n        />\n      );\n    default:\n    case ENTRY_SCREEN_TYPE:\n    case ANSWER_SCREEN_TYPE:\n      return null;\n  }\n}\n\nfunction OptionView({\n  snippet,\n  screenType,\n  selection,\n  onPressOption,\n}: {\n  snippet: ReadingRetentionSnippet,\n  screenType: ScreenType,\n  selection: ?string,\n  onPressOption: (string) => void,\n}) {\n  const check = snippet.check;\n  if (check == null) {\n    return null;\n  }\n  switch (screenType) {\n    case ENTRY_SCREEN_TYPE: {\n      const optionViews = check.options.map((word, index) => (\n        <OptionText\n          state={OPTION_TEXT_STATE_DEFAULT}\n          key={word}\n          word={word}\n          onPress={onPressOption}\n        />\n      ));\n      return <View style={styles.optionContainer}>{optionViews}</View>;\n    }\n    case ANSWER_SCREEN_TYPE: {\n      const getState = (word: string) => {\n        if (word == selection && word == check.word) {\n          return OPTION_TEXT_STATE_CORRECT;\n        } else if (word == selection && word != check.word) {\n          return OPTION_TEXT_STATE_INCORRECT;\n        } else {\n          return OPTION_TEXT_STATE_DEFAULT;\n        }\n      };\n      const optionViews = check.options.map((word, index) => (\n        <OptionText key={word} word={word} state={getState(word)} />\n      ));\n      return <View style={styles.optionContainer}>{optionViews}</View>;\n    }\n\n    default:\n    case READING_SCREEN_TYPE:\n      return null;\n  }\n}\n\nexport default function Level(props: Props) {\n  const [screenType, setScreenType] = useState(\n    (READING_SCREEN_TYPE: ScreenType)\n  );\n  const [selection, setSelection] = useState((null: ?string));\n\n  const timeoutRef = useRef((null: ?TimeoutID));\n\n  useEffect(() => {\n    setScreenType(READING_SCREEN_TYPE);\n    setSelection(null);\n    return () => {\n      if (timeoutRef.current != null) {\n        clearTimeout(timeoutRef.current);\n        timeoutRef.current = null;\n      }\n    };\n  }, [props.snippet]);\n\n  const onTimeout = () => {\n    setScreenType(READING_SCREEN_TYPE);\n    props.onComplete(selection == props.snippet.check.word);\n  };\n\n  const onPressOption = (selection: string) => {\n    setSelection(selection);\n    setScreenType(ANSWER_SCREEN_TYPE);\n    timeoutRef.current = setTimeout(() => {\n      props.onComplete(selection == props.snippet.check.word);\n    }, 2000);\n  };\n\n  const onPressReady = () => {\n    timeoutRef.current = setTimeout(() => {\n      setScreenType(ENTRY_SCREEN_TYPE);\n    }, 2000);\n    setScreenType(ENTRY_TRANSITION_SCREEN_TYPE);\n  };\n\n  const check = props.snippet.check;\n  const texts = props.snippet.words.map((word, i) => {\n    const highlight =\n      screenType != READING_SCREEN_TYPE && i == check.index ? (\n        <Highlight\n          enabled={\n            screenType == ENTRY_SCREEN_TYPE || screenType == ANSWER_SCREEN_TYPE\n          }\n        />\n      ) : null;\n    return (\n      <View key={i} style={styles.textContainer}>\n        <Text style={styles.word}>{word}</Text>\n        <Obfuscator\n          obfuscate={\n            screenType == ENTRY_SCREEN_TYPE ||\n            screenType == ENTRY_TRANSITION_SCREEN_TYPE\n          }\n        />\n        {highlight}\n      </View>\n    );\n  });\n  return (\n    <Container>\n      <View style={{ flexDirection: \"row\", flexWrap: \"wrap\" }}>{texts}</View>\n      <OptionView\n        snippet={props.snippet}\n        screenType={screenType}\n        onPressOption={onPressOption}\n        selection={selection}\n      />\n      <ReadyView screenType={screenType} onPressReady={onPressReady} />\n    </Container>\n  );\n}\n\nconst styles = StyleSheet.create({\n  word: {\n    fontSize: 20,\n    marginRight: 4, // terrible hack :P\n  },\n  textContainer: {\n    margin: 1,\n  },\n  optionContainer: {\n    flexDirection: \"row\",\n  },\n  option: {\n    margin: 5,\n    fontSize: 26,\n    fontWeight: \"bold\",\n  },\n  obfuscator: {\n    position: \"absolute\",\n    top: 0,\n    bottom: 0,\n    left: 0,\n    right: 0,\n    backgroundColor: \"#CCCCCC\",\n  },\n  highlight: {\n    position: \"absolute\",\n    top: 2,\n    bottom: 2,\n    left: -1,\n    right: 2,\n    borderColor: \"green\",\n    borderWidth: 2,\n    boxShadow: \"0 0 5px green\",\n  },\n  ready: {\n    margin: 5,\n    fontSize: 26,\n    alignSelf: \"center\",\n  },\n});\n","// @flow\nimport React, { useEffect, useState, useRef } from \"react\";\n\nimport type {\n  ReadingRetentionGame,\n  GameResult,\n  ReadingRetentionCheck,\n} from \"./types\";\nimport Snippet from \"./Snippet\";\n\nexport type Props = {|\n  onComplete: (GameResult) => void,\n  game: ReadingRetentionGame,\n|};\n\nexport default function Level(props: Props) {\n  const [snippetIndex, setSnippetIndex] = useState(0);\n  const [mistakes, setMistakes] = useState(0);\n\n  const onSnippetComplete = (correct: boolean) => {\n    const updatedMistakes = correct ? mistakes : mistakes + 1;\n    setMistakes(updatedMistakes);\n    if (snippetIndex + 1 >= props.game.snippets.length) {\n      props.onComplete({\n        mistakes: updatedMistakes,\n        id: props.game.id,\n        lastIndex: props.game.snippets[snippetIndex].snippetIndex,\n        timestamp: Date.now(),\n      });\n    } else {\n      setSnippetIndex(snippetIndex + 1);\n    }\n  };\n\n  const snippet = props.game.snippets[snippetIndex];\n  return <Snippet snippet={snippet} onComplete={onSnippetComplete} />;\n}\n","// @flow\nimport React, { useState } from \"react\";\n\nimport {\n  Button,\n  StyleSheet,\n  Switch,\n  Text,\n  TouchableHighlight,\n  View,\n} from \"react-native\";\nimport type { GameResult, ReadingRetentionGame } from \"./types\";\n\nimport LabelButton from \"./common/LabelButton\";\nimport Container from \"./common/Container\";\n\nexport type Props = {|\n  options: Array<{ getGamePlan: ?() => ReadingRetentionGame, name: string }>,\n  setGame: (ReadingRetentionGame) => void,\n|};\n\nexport default function Menu({ setGame, options }: Props) {\n  const [showInfo, setShowInfo] = useState(false);\n\n  if (showInfo) {\n    const onClosePress = () => setShowInfo(false);\n    return (\n      <Container>\n        <LabelButton\n          label=\"❎\"\n          onPress={onClosePress}\n          type=\"neutral\"\n          style={styles.infoButton}\n        />\n        <Text style={styles.infoText}>\n          Read and retain the text.{\"\\n\"}\n          When prompted, indicate which word was at the location indicated by\n          the blue dot.{\"\\n\"}\n        </Text>\n      </Container>\n    );\n  }\n\n  const buttons = options.map(({ getGamePlan, name }) => {\n    const onPress =\n      getGamePlan == null ? () => {} : () => setGame(getGamePlan());\n    return (\n      <LabelButton\n        key={name}\n        label={name}\n        disabled={getGamePlan == null}\n        onPress={onPress}\n        type=\"positive\"\n        style={styles.labelButton}\n      />\n    );\n  });\n\n  const onInfoPress = () => setShowInfo(true);\n\n  return (\n    <Container>\n      <LabelButton\n        label=\"ℹ️\"\n        onPress={onInfoPress}\n        type=\"neutral\"\n        style={styles.infoButton}\n      />\n      {buttons}\n    </Container>\n  );\n}\n\nconst styles = StyleSheet.create({\n  infoButton: { right: 5, position: \"absolute\" },\n  infoText: { paddingLeft: 5, paddingRight: 30, paddingTop: 5 },\n  labelButton: { alignSelf: \"center\" },\n});\n","// @flow\nimport React, { useState, useEffect } from \"react\";\n\nimport type { GameResult, ReadingRetentionGame } from \"./types\";\nimport { getReadingRetentionPlan } from \"./gameLogic\";\nimport DATA from \"./gameData\";\nimport Level from \"./Level\";\nimport Menu from \"./Menu\";\n\nfunction parseData(data: ?string): GameResult[] {\n  if (data == null) {\n    return [];\n  }\n  const results = JSON.parse(data);\n  if (Array.isArray(results)) {\n    return results;\n  }\n  return [];\n}\n\nfunction getContinueGame(\n  results: GameResult[]\n): ?{ name: string, getGamePlan: () => ReadingRetentionGame } {\n  let latest: ?GameResult = null;\n  results.forEach((current) => {\n    if (\n      current.timestamp != null &&\n      (latest == null ||\n        latest.timestamp == null ||\n        latest.timestamp < current.timestamp)\n    ) {\n      latest = current;\n    }\n  });\n\n  if (latest != null) {\n    const result = latest;\n    const option = DATA.find(\n      (option) =>\n        option.id == result.id && option.id != null && result.id != null\n    );\n    if (option != null) {\n      return {\n        name: \"Continue\",\n        getGamePlan: () =>\n          getReadingRetentionPlan(\n            option.snippets,\n            option.id,\n            result.lastIndex + 1\n          ),\n      };\n    }\n  }\n\n  return null;\n}\n\nfunction getOptions(\n  results: GameResult[]\n): Array<{ name: string, getGamePlan: () => ReadingRetentionGame }> {\n  const options = DATA.map((option) => {\n    return {\n      name: option.title,\n      getGamePlan: () => getReadingRetentionPlan(option.snippets, option.id, 0),\n    };\n  });\n\n  const continueGame = getContinueGame(results);\n  if (continueGame != null) {\n    options.unshift(continueGame);\n  }\n  return options;\n}\n\nexport default function ReadingRetention({\n  onComplete,\n  onReady,\n  data,\n}: {\n  onComplete: (GameResult) => void,\n  onReady: () => void,\n  data: GameResult[],\n}) {\n  const [game, setGame] = useState((null: ?ReadingRetentionGame));\n\n  useEffect(() => {\n    onReady();\n  }, []);\n\n  const options = getOptions(data);\n\n  if (game == null) {\n    return <Menu options={options} setGame={setGame} />;\n  } else {\n    const wrappedOnComplete = (result: GameResult) => {\n      onComplete(result);\n      setGame(null);\n    };\n\n    return <Level game={game} onComplete={wrappedOnComplete} />;\n  }\n}\n","// @flow\nimport React, { useState, useEffect, useRef } from \"react\";\nimport type { AbstractComponent } from \"react\";\nimport { AsyncStorage } from \"react-native\";\n\ntype ComponentProps<T> = {\n  data: T[],\n  onComplete: (T) => void,\n  onReady: () => void,\n};\n\nfunction parseArray<T>(input: string): T[] {\n  try {\n    const result = JSON.parse(input);\n    if (Array.isArray(result)) {\n      return result;\n    }\n  } catch (e) {\n    console.error(e);\n    console.error(input);\n  }\n  return [];\n}\n\nfunction getIsInIframe() {\n  try {\n    return window.self !== window.top;\n  } catch (e) {\n    return true;\n  }\n}\n/* we assume that if we are in an iframe, that we are trying to store data with\n */\nconst IS_IN_IFRAME = getIsInIframe();\n\n/**\n * Handles signals with the iframe wrapper (ruggedbrain.com) or the\n * AsyncStorage which provides log data for the ComposedComponent.\n */\nexport default function PersistenceWrapper<T>(\n  ComposedComponent: AbstractComponent<ComponentProps<T>>\n) {\n  return () => {\n    const [data, setData] = useState(([]: Array<T>));\n    if (!IS_IN_IFRAME) {\n      useEffect(() => {\n        AsyncStorage.getItem(\"data\").then((str) => {\n          const parsed: T[] = parseArray(str);\n          setData(parsed);\n        });\n      }, []);\n    }\n    const onReady = IS_IN_IFRAME\n      ? () => {\n          window.onmessage = function(e) {\n            if (typeof e.data === \"string\") {\n              if (e.data.startsWith(window.location.href + \";data;\")) {\n                // extract the data string\n                const res = e.data.split(\";\").slice(2);\n                const parsed: Array<T> = parseArray(res[0]);\n                setData(parsed);\n              }\n            }\n          };\n          window.top.postMessage(window.location.href + \";ready\", \"*\");\n        }\n      : () => {};\n\n    const onComplete = (item) => {\n      const updated = [...data, item];\n      if (IS_IN_IFRAME) {\n        window.top.postMessage(\n          window.location.href + \";complete;\" + JSON.stringify(updated),\n          \"*\"\n        );\n      } else {\n        AsyncStorage.setItem(\"data\", JSON.stringify(updated));\n      }\n      setData(updated);\n    };\n\n    return (\n      <ComposedComponent\n        onComplete={onComplete}\n        onReady={onReady}\n        data={data}\n      />\n    );\n  };\n}\n","// @flow\nimport * as React from \"react\";\nimport ReadingRetention from \"./src/ReadingRetention.js\";\nimport PersistenceWrapper from \"./src/PersistenceWrapper.js\";\n\nconst ReadingRetentionWrapped = PersistenceWrapper(ReadingRetention);\n\nexport default function App(props: any) {\n  return <ReadingRetentionWrapped {...props} />;\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function () {\n    navigator.serviceWorker\n      .register('/reading-retention/expo-service-worker.js', { scope: '/reading-retention/' })\n      .then(function (info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function (error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n"],"sourceRoot":""}